#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <vld.h>

using namespace std;

class Parking; // Раннее объявления класса для видимости в классе Car

class Car {
private:
    string number{}, make{}, colour{}; //  Номер, марка, цвет автомобиля
public:
    Car(string number, string make, string colour, Parking& parkingLot) {
        this->number = number;
        this->make = make;
        this->colour = colour;
        addToArray(parkingLot);
    }

    bool operator==(const Car& other) const {
        return this->number == other.number;
    }

    //Добавление объекта типа Car в вектор в классе Parking
    void addToArray(Parking& parkingLot);

    void parking(Parking& parkingLot);

    friend void leave(Parking& parkingLot, int num);
    
    friend void printParkedCars(Parking& parkingLot);

    friend void isParked(Parking& parkingLot, int num);

    ~Car() {};
};

class Parking {
private:
    vector<pair<Car, bool>> cars;
public:
    friend void isParked(Parking& parkingLot, int num);

    friend void printParkedCars(Parking& parkingLot);

    friend void leave(Parking& parkingLot, int num);

    friend class Car;

    ~Parking() {}
};

//  Метод для парковки авто
void Car::parking(Parking& parkingLot) {
    auto it = std::find_if(parkingLot.cars.begin(), parkingLot.cars.end(),
        [this](const pair<Car, bool>& carPair) {
            return carPair.first == *this;
        });

    if (it != parkingLot.cars.end()) {
        auto index = it - parkingLot.cars.begin();
        parkingLot.cars[index].second = true;
        std::cout << "Car with number " << this->number << " was parked" << std::endl;
    }
}


//  Метод для добавления авто в вектор cars
void Car::addToArray(Parking& parkingLot) {
    parkingLot.cars.push_back(make_pair(*this, false));
}

//  Дружественная функция для проверки присутствия авто на стоянке
void isParked(Parking& parkingLot, int num) {
    pair<Car, bool>& carPair = parkingLot.cars[num];

    if (carPair.second) {
        cout << "Car with number " << carPair.first.number << " is parked" << endl;
    }
    else if (!carPair.second) {
        cout << "Car with number " << carPair.first.number << " is not parked" << endl;
    }
}


//  Дружественная функция для вывода всех припаркованных машин
void printParkedCars(Parking &parkingLot) {
    int flag = 0;
    for (int i = 0; i < parkingLot.cars.size(); i++) {
        if (parkingLot.cars[i].second) {
            if (!flag) {
                cout << "Parked cars:" << endl;
                flag = 1;
            }
            cout << "Number: " << parkingLot.cars[i].first.number << endl;
            cout << "Make: " << parkingLot.cars[i].first.make << endl;
            cout << "Color: " << parkingLot.cars[i].first.colour << endl << endl;
        }
    }
}

//  Дружественная функция для выезда авто с парковки
void leave(Parking& parkingLot, int num) {
    pair<Car, bool>& carPair = parkingLot.cars[num];

    if (carPair.first.number == carPair.first.number) {
        carPair.second = false;
        cout << "Car with number " << carPair.first.number << " left the parking." << endl;
    }
}

int main() {
    setlocale(LC_ALL, "ru");
    Parking parkingLot{};
    int scanPrint{};

    cout << "Хотите ввести данные сами через консоль? Выберите 1, если да, иначе 0: ";
    cin >> scanPrint;

    try {
        //  Обрабатываем случай ввода с консоли
        if (scanPrint) {
            int oneMore = 1;
            while (oneMore) {
                string number{}, make{}, colour{};
                cout << "Введите номер: ";
                cin >> number;
                cout << "Введите марку: ";
                cin >> make;
                cout << "Введите цвет: ";
                cin >> colour;

                Car* newCar = new Car(number, make, colour, parkingLot);
                newCar->addToArray(parkingLot);

                int toParking{};
                cout << "Припарковать этот автомобиль? Выберите 1, если да, иначе 0? ";
                cin >> toParking;

                if (toParking) {
                    newCar->parking(parkingLot);
                }

                cout << "Ввести данные еще одного автомобиля? Выберите 1, если да, иначе 0: ";
                cin >> oneMore;
                if (!oneMore) {
                    oneMore = 0;
                }
                delete newCar;
            }
            //  Проверяем присутствие авто на парковке
            isParked(parkingLot, 0);
            leave(parkingLot, 0);
            //  Выводим список припаркованных авто
            printParkedCars(parkingLot);
        }
        //  Обрабатываем случай ввода не с консоли
        else {
            Car car1("A126AA_26", "BMW", "blue", parkingLot);
            Car car2("E707KA_23", "Nissan", "grey", parkingLot);
            Car car3("A005AA_05", "Lada", "black", parkingLot);
            Car car4("T777TT_777", "Ferrari", "red", parkingLot);
            Car car5("T136AT_126", "Mercedes-Benz", "black", parkingLot);

            //  Паркуем автомобили
            car1.parking(parkingLot);
            car2.parking(parkingLot);
            car3.parking(parkingLot);
            car4.parking(parkingLot);
            car5.parking(parkingLot);

            //  Проверяем присутствие авто на парковке
            isParked(parkingLot, 0);
            isParked(parkingLot, 2);

            //  Выезд авто с парковки
            leave(parkingLot, 0);
            leave(parkingLot, 2);
            leave(parkingLot, 4);

            //  Выводим список припаркованных автомобилей
            printParkedCars(parkingLot);
        }
    }
    //Ловим ошибку и выводим ее содержание
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
        return 1;
    }
    return 0;
}
